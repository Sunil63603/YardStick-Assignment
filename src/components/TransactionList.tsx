"use client"; //because we are using react-hooks and react-query.

import { useState } from "react"; //for editableTransaction.

import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";

import { Card } from "@/components/ui/card"; //this entire component is rendered inside a card.
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"; //table is imported from shadcn.
import { Pencil, Trash2 } from "lucide-react";
import toast from "react-hot-toast";

//TS types,imports,type-aliases
type Transaction = {
  _id: string; //unique id , automatically generated by mongoDB while storing data
  amount: number;
  date: string;
  description: string;
};

type TransactionListProps = {
  setShowForm: React.Dispatch<React.SetStateAction<boolean>>;
  setEditableTx: React.Dispatch<React.SetStateAction<Transaction | null>>;
};

const fetchTransactions = async () => {
  //fetch uses GET by default.
  const res = await fetch("/api/transactions"); //fetch() will trigger GET() inside 'api/transactions/route.ts'

  //in 'api/transactions/route.ts',json() was used to send JSON to frontend
  //here json() is used to read/parse JSON response from backend.
  return res.json(); //json() method will get data from response object.
};

//component to display list of transactions
export default function TransactionList({
  setShowForm,
  setEditableTx,
}: TransactionListProps) {
  const queryClient = useQueryClient();

  //data is actual transactions from backend.
  //isLoading indicates status if data is still being fetched.
  //error shows error if fetch fails.
  const { data, isLoading, error } = useQuery({
    //this hook is used to fetch data from backend
    queryKey: ["transactions"], //used to identify,cache and refresh this data.
    queryFn: fetchTransactions, //function that actually fetches data from backend
  });

  const handleEdit = (tx: Transaction | null) => {
    setEditableTx(tx); //tx is the transaction from the list.
    setShowForm(true); //show the modal
  };

  //called when user clicks on 'bin' icon.
  const handleDelete = (txID: string) => {
    if (confirm("Are you sure you want to delete this transaction?")) {
      deleteMutation.mutate(txID);
    }
  };

  //useMutation tells React-Query that i want to send data(delete in this case) to server(not just fetch)
  const deleteMutation = useMutation({
    mutationFn: async (txID: Transaction["_id"]) => {
      //this is the actual delete function,it takes transaction ID.
      const res = await fetch(`/api/transactions/${txID}`, {
        //calls API route using DELETE method
        method: "DELETE",
      });
      if (!res.ok) throw new Error("Delete failed");
      return res.json(); //waits for server's reply in JSON
    },
    onSuccess: () => {
      //runs after delete is successful
      toast.success("Transaction deleted"); //shows a popup message saying success.
      queryClient.invalidateQueries({ queryKey: ["transactions"] }); //tells ReactQuery to refresh the transaction list.
    },
    onError: () => {
      toast.error("Failed to delete");
    },
  });

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error fetching data</p>;

  return (
    <Card className="p-4 mt-6">
      <h2 className="text-xl font-bold mb-4">Transactions</h2>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Amount</TableHead>
            <TableHead>Date</TableHead>
            <TableHead>Description</TableHead>
            <TableHead>Edit</TableHead>
            <TableHead>Delete</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {data.map((tx: any) => (
            <TableRow key={tx._id}>
              <TableCell>ðŸ’²{tx.amount}</TableCell>
              <TableCell>{new Date(tx.date).toLocaleDateString()}</TableCell>
              <TableCell>{tx.description}</TableCell>
              <TableCell>
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleEdit(tx)}
                    className="text-gray-500 hover:text-blue-800 hover:bg-blue-100 shadow hover:shadow-blue-200 rounded-full p-2 transition-all"
                  >
                    <Pencil size={18}></Pencil>
                  </button>
                </div>
              </TableCell>
              <TableCell>
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleDelete(tx._id)}
                    className="text-gray-500 hover:text-red-600 hover:bg-red-100 shadow hover:shadow-red-200 rounded-full p-2 transition-all"
                  >
                    <Trash2 size={18}></Trash2>
                  </button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </Card>
  );
}
